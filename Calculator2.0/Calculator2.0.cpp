#include <iostream>
#include <locale.h>
#include <math.h>
#include <stdlib.h>

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    cout << "------------------------------------------------------------Мой лучший калькулятор!--------------------------------------------------------------" << endl;
    float A = 0.0F, B = 0.0F, Result = 0.0F;
    char Key = '+';
    while (Key != '0')
    {
        // 1-й вариант меню
        cout << "Введите число А: "; cin >> A;
        cout << R"(
Выберите действие:
'+' - Сложение
'-' - Вычитание
'*' - Умножение
'/' - Деление
'^' - Число А в степени В
'V' - Корень А-ой степени из В
)";
        cin >> Key;
        cout << "Введите число B: "; cin >> B;

        switch (Key)
        {
        case '+':
            Result = A + B;
            cout << "Результат равен: " << Result << endl;
            break;
        case '-':
            Result = A - B;
            cout << "Результат равен: " << Result << endl;
            break;
        case '*':
            Result = A * B;
            cout << "Результат равен: " << Result << endl;
            break;
        default:
            cout << "Некорректное действие!" << endl;
        case '/':
            Result = A / B;
            cout << "Результат равен: " << Result << endl;
            break;

            /* Для возведения в степень используется мат.функция pow. Их 3 на выбор: pow возводит чисто double в степень типа double, powf работает с float, powl - long double,
            а с целыми числами можно использовать любую, т.к. любое вещественное число может хранить в себе целое число (вещественный тип данных старше чем целочисленный). */

        case '^':
            Result = powf(A, B);                                                    // число А в степени В
            cout << "Результат равен: " << Result << endl;
            break;
        case 'V':                                                                   // кв.корень из А равен А в степени 1/2
            Result = powf(B, 1 / A);                                                // корень А-ой степени из В
            cout << "Результат равен: " << Result << endl;
            break;
            system("pause");
        }

        /*

        Особенности конструкции:
        Если ошибиться и ввести символ, которого нет в switch, то ничего не произойдет! Т.к. если внутри switch нет ни одного соответствующего значения, то ни одного подхо-
        дящего кейса не будет найдено, switch будет просто не выполнен и компилятор выйдет прямо в system pause. В этом случае нам нужна какая-то реакция на это. Для этого
        используется default. Если ни одного подходящего кейса не найдено и присутствует default, то будет выполнено действие, находящееся в default. Default не является
        обязательным содержимым switch. И default м/б добавлен в любое место в switch.

        Как это работает?
        Сначала компилятор, зайдя в switch, берет содержание в круглых скобках (здесь это переменная Key, но также м/б выражение, вычисление или какое-то действие), ищет
        его среди кейсов по порядку с первого по последний. Если где-то нашел, выполняет содержимое кейса и по break выходит из switch в system pause. Если же, пройдя по
        всем кейсам, подходящего значения не найденно, компелятор проверяет есть ли default. Если default есть, то компилятор выполняет его содержимое. Если default от-
        сутствует, то ничего не будет выполнено.

        Почему каждый кейс должен заканчиваться брейком?
        Кейс это не команды, а метки, они не выполняются сами по себе, а след, попав в нужный кейс, мы начнем выполнять все действия до тех пор пока не встретим break. А
        это м/б также и несколько кейсов подряд где пропущен break. Все выполнится, т.к. компилятор ищет break чтобы остановить выполнение условия и выполнит все кейсы по
        порядку пока не встретит break. break нельзя пропускать!
        (!) Последний брейк можно не ставить, но лучше поставить чтобы потом не забыть о нем, добавив еще кейс.

        Но есть случаи когда можно не писать break.
        Особый случай, когда например нужно учесть ошибку ввода пользователя, скажем, ввод строчной буквы вместо заглавной, как ниже:

        case 'v':
        case 'V':
            Result = powf(B, 1 / A);
            cout << "Результат равен: " << Result << endl;
            break;

        Пользователь ошибется и введет маленькую 'v'. У нас активируется кейс с 'v', а потом станет все выполняться до тех пор пока компилятор не наткнется на break. В та-
        кой конструкции при вводе большой или маленькой 'v' программа выполнит одно и тоже действие! Этот прием можно использовать когда нам нужно для нескольких кейсов вы-
        полнить одно и тоже действие.
        (!) Плюсом к этому мы можем в кейс с 'v' добавить собственное действие, которое будет индивидуально лишь для этого кейса!

        case 'v':
            cout << "Вы ввели 'v' вместо 'V'. Будьте внимательны!" << endl;
        case 'V':
            Result = powf(B, 1 / A);
            cout << "Результат равен: " << Result << endl;
            break;

        В этом случае если пользователь введет 'v' или 'V', программа все равно выполнит для него нужное действие, т.к. после 'v' нет break. Но в кейс 'v' добавим предуп-
        реждение, чтобы в следующий раз пользователь вводил корректно.


        2-й вариант меню
        Калькулятор в строчку.
        Для меню идеальна сырая строка */

        cout << R"(
Используйте действие по образцу:
Сложение:                   А+В
Вычитание:                  А-В
Умножение:                  А*В
Деление:                    А/В
Число А в степени В         А^B
Корень А-ой степени из В    AVB
)";

        cin >> A >> Key >> B;                                                       // конструкция множественного ввода данных                                  

        switch (Key)
        {
        case '+':
            Result = A + B;
            cout << "Результат равен: " << Result << endl;
            break;
        case '-':
            Result = A - B;
            cout << "Результат равен: " << Result << endl;
            break;
        case '*':
            Result = A * B;
            cout << "Результат равен: " << Result << endl;
            break;
        default:
            cout << "Некорректное действие!" << endl;
        case '/':
            Result = A / B;
            cout << "Результат равен: " << Result << endl;
            break;
        case '^':
            Result = powf(A, B);
            cout << "Результат равен: " << Result << endl;
            break;
        case 'V':
            Result = powf(B, 1 / A);
            cout << "Результат равен: " << Result << endl;
            break;
        }
        cout << "Для выхода из программы введите 0, для продолжения работы программы нажмите любой символ!" << endl;
        cin >> Key;
        system("cls");
    }
}